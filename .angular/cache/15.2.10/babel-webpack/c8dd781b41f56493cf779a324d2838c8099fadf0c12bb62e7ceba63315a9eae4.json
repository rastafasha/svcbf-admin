{"ast":null,"code":"import { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/users.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/users.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegistroComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\", 29);\n    i0.ɵɵtext(2, \" Las Contrase\\u00F1as deben ser iguales \");\n    i0.ɵɵelementEnd()();\n  }\n}\n//declare function init_plugins();\nexport let RegistroComponent = /*#__PURE__*/(() => {\n  class RegistroComponent {\n    constructor(userService, router, fb) {\n      this.userService = userService;\n      this.router = router;\n      this.fb = fb;\n    }\n    sonIguales(campo1, campo2) {\n      return group => {\n        let pass1 = group.controls[campo1].value;\n        let pass2 = group.controls[campo2].value;\n        if (pass1 === pass2) {\n          return null;\n        }\n        return {\n          sonIguales: true\n        };\n      };\n    }\n    ngOnInit() {\n      //init_plugins();\n      this.forma = this.fb.group({\n        id: [''],\n        username: [''],\n        first_name: [''],\n        last_name: [''],\n        email: [''],\n        password: [''],\n        password2: [''],\n        is_active: ['1'],\n        user_role: ['user'],\n        condiciones: new FormControl(false)\n      }, {\n        validators: this.sonIguales('password', 'password2')\n      });\n      /*this.forma = new FormGroup({\n        username: new FormControl( '', Validators.required ),\n        first_name: new FormControl( '', Validators.required ),\n        last_name: new FormControl( '', Validators.required ),\n        image: new FormControl( '', Validators.required ),\n        email: new FormControl( '', [Validators.required, Validators.email]),\n        password: new FormControl( '', Validators.required ),\n        password2: new FormControl( '', Validators.required ),\n        condiciones: new FormControl(false)\n      }, { validators: this.sonIguales( 'password', 'password2' ) } );\n           /*this.forma.setValue({\n        username: 'admin',\n        first_name: 'tes',\n        last_name: 'admin',\n        image: 'logo.png',\n        email: 'mercadocreativo@gmail.com',\n        password: 'admin',\n        password2: 'admin',\n        condiciones: true\n      });*/\n    }\n    /*registrarUsuario() {\n         if (this.forma.invalid) {\n        return;\n      }\n         if ( !this.forma.value.condiciones) {\n        // swal('Importante', 'Debe aceptar las condiciones!', 'warning');\n        \n        return;\n      }\n         let user = new User(\n        \n      );\n         this.userService.createUser(user)\n        .subscribe( resp => this.router.navigate(['/login']));\n       }*/\n    registrarUsuario() {\n      const formData = new FormData();\n      formData.append('username', this.forma.get('username').value);\n      formData.append('first_name', this.forma.get('first_name').value);\n      formData.append('last_name', this.forma.get('last_name').value);\n      formData.append('email', this.forma.get('email').value);\n      formData.append('password', this.forma.get('password').value);\n      formData.append('is_active', this.forma.get('is_active').value);\n      formData.append('user_role', this.forma.get('user_role').value);\n      const id = this.forma.get('id').value;\n      if (id) {\n        this.userService.updateUser(formData, +id).subscribe(res => {\n          if (res.status === 'error') {\n            this.uploadError = res.message;\n          } else {\n            this.router.navigate(['/login']);\n          }\n        }, error => this.error = error);\n      } else {\n        this.userService.createUser(formData).subscribe(res => {\n          if (res.status === 'error') {\n            this.uploadError = res.message;\n          } else {\n            this.router.navigate(['/login']);\n          }\n        }, error => this.error = error);\n      }\n    }\n  }\n  RegistroComponent.ɵfac = function RegistroComponent_Factory(t) {\n    return new (t || RegistroComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  RegistroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegistroComponent,\n    selectors: [[\"app-registro\"]],\n    decls: 50,\n    vars: 3,\n    consts: [[\"id\", \"wrapper\", 1, \"login-register\", \"login-sidebar\", 2, \"background-image\", \"url(assets/images/background/login-register.jpg)\"], [1, \"login-box\", \"card\"], [1, \"card-body\"], [\"ngNativeValidate\", \"\", \"id\", \"loginform\", \"action\", \"index.html\", 1, \"form-horizontal\", \"form-material\", 3, \"formGroup\", \"ngSubmit\"], [\"href\", \"javascript:void(0)\", 1, \"text-center\", \"db\"], [\"src\", \"assets/images/logo-icon.png\", \"alt\", \"Home\"], [\"src\", \"assets/images/logo-text.png\", \"alt\", \"Home\"], [1, \"box-title\", \"m-t-40\", \"m-b-0\"], [1, \"form-group\", \"m-t-20\"], [1, \"col-xs-12\"], [\"formControlName\", \"first_name\", \"name\", \"first_name\", \"type\", \"text\", \"required\", \"\", \"placeholder\", \"Nombre\", 1, \"form-control\"], [\"formControlName\", \"last_name\", \"name\", \"last_name\", \"type\", \"text\", \"required\", \"\", \"placeholder\", \"Apellido\", 1, \"form-control\"], [\"formControlName\", \"username\", \"name\", \"username\", \"type\", \"text\", \"required\", \"\", \"placeholder\", \"Usuario\", 1, \"form-control\"], [1, \"form-group\"], [\"formControlName\", \"email\", \"name\", \"email\", \"type\", \"text\", \"required\", \"\", \"placeholder\", \"Email\", 1, \"form-control\"], [\"formControlName\", \"password\", \"name\", \"password\", \"type\", \"password\", \"required\", \"\", \"placeholder\", \"Contrase\\u00F1a\", 1, \"form-control\"], [\"formControlName\", \"password2\", \"name\", \"password2\", \"type\", \"password\", \"required\", \"\", \"placeholder\", \"Confirmar Contrase\\u00F1a\", 1, \"form-control\"], [\"class\", \"form-group\", 4, \"ngIf\"], [1, \"form-group\", \"row\"], [1, \"col-md-12\"], [1, \"checkbox\", \"checkbox-primary\", \"p-t-0\"], [\"formControlName\", \"condiciones\", \"name\", \"condiciones\", \"id\", \"checkbox-signup\", \"type\", \"checkbox\"], [\"for\", \"checkbox-signup\"], [\"href\", \"#\"], [1, \"form-group\", \"text-center\", \"m-t-20\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", \"btn-lg\", \"btn-block\", \"text-uppercase\", \"waves-effect\", \"waves-light\", 3, \"disabled\"], [1, \"form-group\", \"m-b-0\"], [1, \"col-sm-12\", \"text-center\"], [\"routerLink\", \"/login\", 1, \"text-info\", \"m-l-5\"], [1, \"text-danger\"]],\n    template: function RegistroComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function RegistroComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.registrarUsuario();\n        });\n        i0.ɵɵelementStart(4, \"a\", 4);\n        i0.ɵɵelement(5, \"img\", 5)(6, \"br\")(7, \"img\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"h3\", 7);\n        i0.ɵɵtext(9, \"Registrate ahora\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"small\");\n        i0.ɵɵtext(11, \"Crea una cuenta para usar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9);\n        i0.ɵɵelement(14, \"input\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 8)(16, \"div\", 9);\n        i0.ɵɵelement(17, \"input\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 8)(19, \"div\", 9);\n        i0.ɵɵelement(20, \"input\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 13)(22, \"div\", 9);\n        i0.ɵɵelement(23, \"input\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"div\", 13)(25, \"div\", 9);\n        i0.ɵɵelement(26, \"input\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 13)(28, \"div\", 9);\n        i0.ɵɵelement(29, \"input\", 16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(30, RegistroComponent_div_30_Template, 3, 0, \"div\", 17);\n        i0.ɵɵelementStart(31, \"div\", 18)(32, \"div\", 19)(33, \"div\", 20);\n        i0.ɵɵelement(34, \"input\", 21);\n        i0.ɵɵelementStart(35, \"label\", 22);\n        i0.ɵɵtext(36, \" Estoy de acuerdo con los \");\n        i0.ɵɵelementStart(37, \"a\", 23);\n        i0.ɵɵtext(38, \"T\\u00E9rminos\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(39, \"div\", 24)(40, \"div\", 9)(41, \"button\", 25);\n        i0.ɵɵtext(42, \"Registrarme\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(43, \"div\", 26)(44, \"div\", 27)(45, \"p\");\n        i0.ɵɵtext(46, \"Tienes una cuenta? \");\n        i0.ɵɵelementStart(47, \"a\", 28)(48, \"b\");\n        i0.ɵɵtext(49, \"Ingresar\");\n        i0.ɵɵelementEnd()()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.forma);\n        i0.ɵɵadvance(27);\n        i0.ɵɵproperty(\"ngIf\", (ctx.forma.errors == null ? null : ctx.forma.errors.sonIguales) && !ctx.forma.pristine);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"disabled\", !ctx.forma.valid);\n      }\n    },\n    dependencies: [i4.NgIf, i3.DefaultValueAccessor, i3.CheckboxControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName, i2.RouterLink]\n  });\n  return RegistroComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}