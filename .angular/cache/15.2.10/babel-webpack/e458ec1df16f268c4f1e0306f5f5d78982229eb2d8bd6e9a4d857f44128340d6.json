{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpBackend } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(handler) {\n      this.serverUrl = environment.baseUrl;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.http = new HttpClient(handler);\n    }\n    getContacts() {\n      return this.http.get(this.serverUrl + 'api_contact/adminContacts/').pipe(catchError(this.handleError));\n    }\n    contactForm(formdata) {\n      return this.http.post(this.serverUrl + 'api_contact/contact/', formdata, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    deleteContact(id) {\n      return this.http.delete(this.serverUrl + 'api_contact/deleteContact/' + id).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message\n      this.errorData = {\n        errorTitle: 'Oops! Request for document failed',\n        errorDesc: 'Something bad happened. Please try again later.'\n      };\n      return throwError(this.errorData);\n    }\n  }\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpBackend));\n  };\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}