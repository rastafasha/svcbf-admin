{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DocumentoService = /*#__PURE__*/(() => {\n  class DocumentoService {\n    constructor(http) {\n      this.http = http;\n      this.serverUrl = environment.baseUrl;\n    }\n    getDocumentos() {\n      return this.http.get(this.serverUrl + 'api_documento/adminDocumentos/').pipe(catchError(this.handleError));\n    }\n    getDocumento(id) {\n      return this.http.get(this.serverUrl + 'api_documento/adminDocumento/' + id).pipe(catchError(this.handleError));\n    }\n    createDocumento(documento) {\n      return this.http.post(this.serverUrl + 'api_documento/createDocumento/', documento).pipe(catchError(this.handleError));\n    }\n    updateDocumento(documento, id) {\n      return this.http.post(this.serverUrl + 'api_documento/updateDocumento/' + id, documento).pipe(catchError(this.handleError));\n    }\n    deleteDocumento(id) {\n      return this.http.delete(this.serverUrl + 'api_documento/deleteDocumento/' + id).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message\n      return throwError('Something bad happened. Please try again later.');\n    }\n  }\n  DocumentoService.ɵfac = function DocumentoService_Factory(t) {\n    return new (t || DocumentoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  DocumentoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentoService,\n    factory: DocumentoService.ɵfac,\n    providedIn: 'root'\n  });\n  return DocumentoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}