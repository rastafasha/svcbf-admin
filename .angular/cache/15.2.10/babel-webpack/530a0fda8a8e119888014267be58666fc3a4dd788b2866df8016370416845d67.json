{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.serverUrl = environment.baseUrl;\n      this.isLoggedIn = false;\n    }\n    login(username, password) {\n      return this.http.post(`${this.serverUrl}api/login`, {\n        username: username,\n        password: password\n      }).pipe(map(user => {\n        if (user && user.token) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.isLoggedIn = true;\n        }\n      }), catchError(this.handleError));\n    }\n    getAuthorizationToken() {\n      const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n      return currentUser.token;\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.isLoggedIn = false;\n    }\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message\n      this.errorData = {\n        errorTitle: 'Oops! Request for document failed',\n        errorDesc: 'Something bad happened. Please try again later.'\n      };\n      return throwError(this.errorData);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}