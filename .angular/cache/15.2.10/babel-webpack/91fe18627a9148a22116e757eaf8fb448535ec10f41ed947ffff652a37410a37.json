{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst EXCEL_EXTENSION = '.xlsx';\nexport let CongresoService = /*#__PURE__*/(() => {\n  class CongresoService {\n    constructor(http) {\n      this.http = http;\n      this.serverUrl = environment.baseUrl;\n    }\n    getCongresos() {\n      return this.http.get(this.serverUrl + 'api_congresopago/adminCongresos/').pipe(catchError(this.handleError));\n    }\n    getCongreso(id) {\n      return this.http.get(this.serverUrl + 'api_congresopago/adminCongreso/' + id).pipe(catchError(this.handleError));\n    }\n    deleteCongreso(id) {\n      return this.http.delete(this.serverUrl + 'api_congresopago/deleteCongreso/' + id).pipe(catchError(this.handleError));\n    }\n    // export to excel\n    exportAsExcelFile(json, excelFileName) {\n      const worksheet = XLSX.utils.json_to_sheet(json);\n      const workbook = {\n        Sheets: {\n          'data': worksheet\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      this.saveAsExcelFile(excelBuffer, excelFileName);\n    }\n    //metodo\n    saveAsExcelFile(buffer, fileName) {\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message\n      return throwError('Something bad happened. Please try again later.');\n    }\n  }\n  CongresoService.ɵfac = function CongresoService_Factory(t) {\n    return new (t || CongresoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  CongresoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CongresoService,\n    factory: CongresoService.ɵfac,\n    providedIn: 'root'\n  });\n  return CongresoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}